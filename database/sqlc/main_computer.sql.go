// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: main_computer.sql

package sqlc

import (
	"context"
)

const createMainComputerState = `-- name: CreateMainComputerState :one
INSERT INTO
  main_computer (state)
VALUES
  (?) RETURNING id, state
`

func (q *Queries) CreateMainComputerState(ctx context.Context, state int64) (MainComputer, error) {
	row := q.db.QueryRowContext(ctx, createMainComputerState, state)
	var i MainComputer
	err := row.Scan(&i.ID, &i.State)
	return i, err
}

const deleteMainComputerState = `-- name: DeleteMainComputerState :exec
DELETE FROM
  main_computer
WHERE
  id = ?
`

func (q *Queries) DeleteMainComputerState(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMainComputerState, id)
	return err
}

const getMainComputerState = `-- name: GetMainComputerState :one
SELECT
  id, state
FROM
  main_computer
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetMainComputerState(ctx context.Context, id int64) (MainComputer, error) {
	row := q.db.QueryRowContext(ctx, getMainComputerState, id)
	var i MainComputer
	err := row.Scan(&i.ID, &i.State)
	return i, err
}

const getMainComputerStates = `-- name: GetMainComputerStates :many
SELECT
  id, state
FROM
  main_computer
ORDER BY
  id
`

func (q *Queries) GetMainComputerStates(ctx context.Context) ([]MainComputer, error) {
	rows, err := q.db.QueryContext(ctx, getMainComputerStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MainComputer
	for rows.Next() {
		var i MainComputer
		if err := rows.Scan(&i.ID, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
