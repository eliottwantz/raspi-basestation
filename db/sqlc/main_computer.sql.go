// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: main_computer.sql

package sqlc

import (
	"context"
	"time"
)

const createMainComputer = `-- name: CreateMainComputer :one
INSERT INTO main_computers (created_at, state)
VALUES (?, ?)
RETURNING id, created_at, state
`

type CreateMainComputerParams struct {
	CreatedAt time.Time `json:"created_at"`
	State     int64     `json:"state"`
}

func (q *Queries) CreateMainComputer(ctx context.Context, arg CreateMainComputerParams) (MainComputer, error) {
	row := q.db.QueryRowContext(ctx, createMainComputer, arg.CreatedAt, arg.State)
	var i MainComputer
	err := row.Scan(&i.ID, &i.CreatedAt, &i.State)
	return i, err
}

const deleteMainComputer = `-- name: DeleteMainComputer :exec
DELETE FROM main_computers
WHERE id = ?
`

func (q *Queries) DeleteMainComputer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMainComputer, id)
	return err
}

const getAllMainComputer = `-- name: GetAllMainComputer :many
SELECT id, created_at, state
FROM main_computers
ORDER BY id
`

func (q *Queries) GetAllMainComputer(ctx context.Context) ([]MainComputer, error) {
	rows, err := q.db.QueryContext(ctx, getAllMainComputer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MainComputer
	for rows.Next() {
		var i MainComputer
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestMainComputer = `-- name: GetLatestMainComputer :one
SELECT id, created_at, state
FROM main_computers
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLatestMainComputer(ctx context.Context) (MainComputer, error) {
	row := q.db.QueryRowContext(ctx, getLatestMainComputer)
	var i MainComputer
	err := row.Scan(&i.ID, &i.CreatedAt, &i.State)
	return i, err
}
