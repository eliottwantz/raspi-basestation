// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: sensor.sql

package sqlc

import (
	"context"
)

const createSensor = `-- name: CreateSensor :one
INSERT INTO sensors (name, mesure)
VALUES (?, ?)
RETURNING id, name, mesure
`

type CreateSensorParams struct {
	Name   string `json:"name"`
	Mesure string `json:"mesure"`
}

func (q *Queries) CreateSensor(ctx context.Context, arg CreateSensorParams) (Sensor, error) {
	row := q.db.QueryRowContext(ctx, createSensor, arg.Name, arg.Mesure)
	var i Sensor
	err := row.Scan(&i.ID, &i.Name, &i.Mesure)
	return i, err
}

const deleteSensor = `-- name: DeleteSensor :exec
DELETE FROM sensors
WHERE id = ?
`

func (q *Queries) DeleteSensor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSensor, id)
	return err
}

const getAllSensor = `-- name: GetAllSensor :many
SELECT id, name, mesure
FROM sensors
ORDER BY id
`

func (q *Queries) GetAllSensor(ctx context.Context) ([]Sensor, error) {
	rows, err := q.db.QueryContext(ctx, getAllSensor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sensor
	for rows.Next() {
		var i Sensor
		if err := rows.Scan(&i.ID, &i.Name, &i.Mesure); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestSensor = `-- name: GetLatestSensor :one
SELECT id, name, mesure
FROM sensors
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLatestSensor(ctx context.Context) (Sensor, error) {
	row := q.db.QueryRowContext(ctx, getLatestSensor)
	var i Sensor
	err := row.Scan(&i.ID, &i.Name, &i.Mesure)
	return i, err
}
